import os
import sys
import subprocess
import nmap
import requests
import smtplib
from email.mime.text import MIMEText
from collections import defaultdict
import datetime
from graphviz import Digraph

SMTP_SERVER = 'smtp.gmail.com'
SMTP_PORT = 587
SENDER_EMAIL = ''
SENDER_PASSWORD = '' 
RECIPIENT_EMAIL = ''

def install_dependencies():
    try:
        import nmap
        import graphviz
        import requests
        from email.mime.text import MIMEText
    except ImportError:
        print("Installing required libraries...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "python-nmap", "requests", "graphviz"])
        print("Dependencies installed successfully.")

install_dependencies()

def send_email_alert(subject, body):
    msg = MIMEText(body)
    msg["Subject"] = subject
    msg["From"] = SENDER_EMAIL
    msg["To"] = RECIPIENT_EMAIL

    try:
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SENDER_EMAIL, SENDER_PASSWORD)
            server.sendmail(SENDER_EMAIL, RECIPIENT_EMAIL, msg.as_string())
        print(f"Email sent to {RECIPIENT_EMAIL}")
    except Exception as e:
        print(f"Failed to send email: {e}")

def get_vulnerabilities(service, version):
    vulnerabilities = []

    try:
        nvd_api = "https://services.nvd.nist.gov/rest/json/cves/1.0"
        query_params = {"keyword": f"{service} {version}", "resultsPerPage": 5}
        response = requests.get(nvd_api, params=query_params)
        if response.status_code == 200:
            data = response.json()
            if data["totalResults"] > 0:
                for item in data["result"]["CVE_Items"]:
                    cve_id = item["cve"]["CVE_data_meta"]["ID"]
                    description = item["cve"]["description"]["description_data"][0]["value"]
                    vulnerabilities.append(f"{cve_id}: {description}")
    except Exception as e:
        vulnerabilities.append(f"NVD query failed: {e}")

    try:
        cve_details_api = f"https://www.cvedetails.com/json-feed.php?product_id={version}"
        response = requests.get(cve_details_api)
        if response.status_code == 200:
            data = response.json()
            for item in data:
                cve_id = item.get("cve_id")
                summary = item.get("summary")
                vulnerabilities.append(f"{cve_id}: {summary}")
    except Exception as e:
        vulnerabilities.append(f"CVE Details query failed: {e}")

    return vulnerabilities if vulnerabilities else ["No known vulnerabilities."]

def detect_misconfigurations(service, version, port):
    misconfigurations = []
    if service in ["ftp", "telnet"] and port in [21, 23]:
        misconfigurations.append(f"Service {service} running on common default port {port}. Consider using secure alternatives.")
    if service == "http" and port == 80:
        misconfigurations.append(f"HTTP detected on port 80. Consider upgrading to HTTPS for secure connections.")
    if "ssl" in service and version and version.startswith("1"):
        misconfigurations.append(f"Weak SSL version {version} detected. Consider upgrading to TLS 1.2 or higher.")
    return misconfigurations

def scan_open_ports(ip_address, scan_type):
    scanner = nmap.PortScanner()
    scan_args = {
        "default": "-sV",
        "aggressive": "-A",
        "udp": "-sU",
        "ping_sweep": "-sn"
    }

    print(f"Running {scan_type} scan on {ip_address}...\n")
    scanner.scan(ip_address, arguments=scan_args[scan_type])

    open_ports = []
    vulnerabilities_detected = False

    for host in scanner.all_hosts():
        for protocol in scanner[host].all_protocols():
            for port in scanner[host][protocol]:
                port_state = scanner[host][protocol][port]['state']
                service = scanner[host][protocol][port]['name']
                version = scanner[host][protocol][port].get('version', '')
                if port_state == 'open':
                    open_ports.append((port, service, version))
                    print(f"Port {port} is open. Running {service} version {version}.")
                    vulnerabilities = get_vulnerabilities(service, version)
                    misconfigs = detect_misconfigurations(service, version, port)

                    if vulnerabilities or misconfigs:
                        vulnerabilities_detected = True
                        alert_body = f"Port {port} ({service} version {version}):\n"
                        alert_body += "Vulnerabilities:\n" + "\n".join(vulnerabilities) + "\n"
                        alert_body += "Misconfigurations:\n" + "\n".join(misconfigs) + "\n"
                        send_email_alert("Vulnerability Detected", alert_body)
    
    return open_ports, vulnerabilities_detected

def generate_network_map(scan_data):
    dot = Digraph(comment='Network Map')
    for port, service, version in scan_data:
        dot.node(f"Port {port}", f"Port: {port}\nService: {service}\nVersion: {version}")
    dot.render('network_map.gv', view=True)
    print("Network map generated.")

def log_scan_results(ip_address, scan_type, open_ports):
    log_filename = f"vulnerability_scan_{ip_address}_{datetime.datetime.now().strftime('%Y%m%d%H%M%S')}.log"
    with open(log_filename, "w") as log_file:
        log_file.write(f"Vulnerability Scan Log\nIP Address: {ip_address}\nScan Type: {scan_type}\nDate: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        for port, service, version in open_ports:
            log_file.write(f"Port {port}: {service} {version}\n")
    print(f"Log saved to {log_filename}")

def main():
    ip_address = input("Enter the target IP address: ")
    scan_type = input("Enter scan type (default, aggressive, udp, ping_sweep): ").lower()

    if scan_type not in ["default", "aggressive", "udp", "ping_sweep"]:
        print("Invalid scan type. Using default scan.")
        scan_type = "default"

    open_ports, vulnerabilities_detected = scan_open_ports(ip_address, scan_type)
    log_scan_results(ip_address, scan_type, open_ports)

    if vulnerabilities_detected:
        print("Critical vulnerabilities detected! Check your email for details.")
    generate_network_map(open_ports)

if __name__ == "__main__":
    main()
